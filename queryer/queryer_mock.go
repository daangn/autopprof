// Code generated by MockGen. DO NOT EDIT.
// Source: queryer.go

// Package queryer is a generated GoMock package.
package queryer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCgroupsQueryer is a mock of CgroupsQueryer interface.
type MockCgroupsQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockCgroupsQueryerMockRecorder
}

// MockCgroupsQueryerMockRecorder is the mock recorder for MockCgroupsQueryer.
type MockCgroupsQueryerMockRecorder struct {
	mock *MockCgroupsQueryer
}

// NewMockCgroupsQueryer creates a new mock instance.
func NewMockCgroupsQueryer(ctrl *gomock.Controller) *MockCgroupsQueryer {
	mock := &MockCgroupsQueryer{ctrl: ctrl}
	mock.recorder = &MockCgroupsQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCgroupsQueryer) EXPECT() *MockCgroupsQueryerMockRecorder {
	return m.recorder
}

// CPUUsage mocks base method.
func (m *MockCgroupsQueryer) CPUUsage() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUUsage")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CPUUsage indicates an expected call of CPUUsage.
func (mr *MockCgroupsQueryerMockRecorder) CPUUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUUsage", reflect.TypeOf((*MockCgroupsQueryer)(nil).CPUUsage))
}

// MemUsage mocks base method.
func (m *MockCgroupsQueryer) MemUsage() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemUsage")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemUsage indicates an expected call of MemUsage.
func (mr *MockCgroupsQueryerMockRecorder) MemUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemUsage", reflect.TypeOf((*MockCgroupsQueryer)(nil).MemUsage))
}

// SetCPUQuota mocks base method.
func (m *MockCgroupsQueryer) SetCPUQuota() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCPUQuota")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCPUQuota indicates an expected call of SetCPUQuota.
func (mr *MockCgroupsQueryerMockRecorder) SetCPUQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCPUQuota", reflect.TypeOf((*MockCgroupsQueryer)(nil).SetCPUQuota))
}

// MockRuntimeQueryer is a mock of RuntimeQueryer interface.
type MockRuntimeQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeQueryerMockRecorder
}

// MockRuntimeQueryerMockRecorder is the mock recorder for MockRuntimeQueryer.
type MockRuntimeQueryerMockRecorder struct {
	mock *MockRuntimeQueryer
}

// NewMockRuntimeQueryer creates a new mock instance.
func NewMockRuntimeQueryer(ctrl *gomock.Controller) *MockRuntimeQueryer {
	mock := &MockRuntimeQueryer{ctrl: ctrl}
	mock.recorder = &MockRuntimeQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeQueryer) EXPECT() *MockRuntimeQueryerMockRecorder {
	return m.recorder
}

// GoroutineCount mocks base method.
func (m *MockRuntimeQueryer) GoroutineCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoroutineCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GoroutineCount indicates an expected call of GoroutineCount.
func (mr *MockRuntimeQueryerMockRecorder) GoroutineCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoroutineCount", reflect.TypeOf((*MockRuntimeQueryer)(nil).GoroutineCount))
}
