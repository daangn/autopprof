// Code generated by MockGen. DO NOT EDIT.
// Source: cgroups.go

// Package autopprof is a generated GoMock package.
package autopprof

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockqueryer is a mock of queryer interface.
type Mockqueryer struct {
	ctrl     *gomock.Controller
	recorder *MockqueryerMockRecorder
}

// MockqueryerMockRecorder is the mock recorder for Mockqueryer.
type MockqueryerMockRecorder struct {
	mock *Mockqueryer
}

// NewMockqueryer creates a new mock instance.
func NewMockqueryer(ctrl *gomock.Controller) *Mockqueryer {
	mock := &Mockqueryer{ctrl: ctrl}
	mock.recorder = &MockqueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockqueryer) EXPECT() *MockqueryerMockRecorder {
	return m.recorder
}

// cpuUsage mocks base method.
func (m *Mockqueryer) cpuUsage() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "cpuUsage")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// cpuUsage indicates an expected call of cpuUsage.
func (mr *MockqueryerMockRecorder) cpuUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cpuUsage", reflect.TypeOf((*Mockqueryer)(nil).cpuUsage))
}

// memUsage mocks base method.
func (m *Mockqueryer) memUsage() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "memUsage")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// memUsage indicates an expected call of memUsage.
func (mr *MockqueryerMockRecorder) memUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "memUsage", reflect.TypeOf((*Mockqueryer)(nil).memUsage))
}

// setCPUQuota mocks base method.
func (m *Mockqueryer) setCPUQuota() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setCPUQuota")
	ret0, _ := ret[0].(error)
	return ret0
}

// setCPUQuota indicates an expected call of setCPUQuota.
func (mr *MockqueryerMockRecorder) setCPUQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setCPUQuota", reflect.TypeOf((*Mockqueryer)(nil).setCPUQuota))
}
