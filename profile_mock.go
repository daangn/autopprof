// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package autopprof is a generated GoMock package.
package autopprof

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockprofiler is a mock of profiler interface.
type Mockprofiler struct {
	ctrl     *gomock.Controller
	recorder *MockprofilerMockRecorder
}

// MockprofilerMockRecorder is the mock recorder for Mockprofiler.
type MockprofilerMockRecorder struct {
	mock *Mockprofiler
}

// NewMockprofiler creates a new mock instance.
func NewMockprofiler(ctrl *gomock.Controller) *Mockprofiler {
	mock := &Mockprofiler{ctrl: ctrl}
	mock.recorder = &MockprofilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockprofiler) EXPECT() *MockprofilerMockRecorder {
	return m.recorder
}

// profileCPU mocks base method.
func (m *Mockprofiler) profileCPU() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "profileCPU")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// profileCPU indicates an expected call of profileCPU.
func (mr *MockprofilerMockRecorder) profileCPU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "profileCPU", reflect.TypeOf((*Mockprofiler)(nil).profileCPU))
}

// profileHeap mocks base method.
func (m *Mockprofiler) profileHeap() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "profileHeap")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// profileHeap indicates an expected call of profileHeap.
func (mr *MockprofilerMockRecorder) profileHeap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "profileHeap", reflect.TypeOf((*Mockprofiler)(nil).profileHeap))
}
